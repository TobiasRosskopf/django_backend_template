# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Django Backend CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: "0 0 1 * *"

jobs:
  build:
    strategy:
      max-parallel: 2
      matrix:
        os: [ubuntu-latest]
        node-version: [12.x]
        python-version: [3.6, 3.7, 3.8, 3.9]
        postgres-version: [13]

    runs-on: ${{ matrix.os }}

    env:
      DEBUG: True
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up GDAL
      run: sudo apt-get install gdal-bin -y

    - name: Set up PostGIS ${{ matrix.postgres-version }}
      uses: huaxk/postgis-action@v1
      with:
        postgresql version: ${{ matrix.postgres-version }}
        postgresql db: $DB_NAME
        postgresql user: $DB_USER
        postgresql password: $DB_PASSWORD

    - name: Install Node JS ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Set up Python Version ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipenv-to-requirements
        pipenv_to_requirements --freeze
        pip install -r requirements.txt -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run migrations
      run: python manage.py migrate

    - name: Test with pytest
      run: pytest

    - name: Set up Postman (newman)
      run: npm install newman -g

    - name: Run server & Test API with Postman (newman)
      run: |
        python manage.py runserver &
        sleep 2
        ./postman/run.sh
        kill -9 `lsof -i:5000 -t`
