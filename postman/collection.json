{
	"info": {
		"_postman_id": "074d18ad-06e1-4b82-bb85-d8cbf58c0cbf",
		"name": "django_backend_template",
		"description": "# Introduction\nWhat does your API do?\n\n# Overview\nThings that the developers should know about\n\n# Authentication\nWhat is the preferred way of using the API?\n\n# Error Codes\nWhat errors and status codes can a user expect?\n\n# Rate limit\nIs there a limit to the number of requests an user can send?",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Signup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"Status code name is 'Created'\", function () {",
							"    pm.response.to.have.status(\"Created\");",
							"});",
							"",
							"pm.test(\"Response includes 'username'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"username\");",
							"});",
							"",
							"pm.test(\"Response includes 'token'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"token\");",
							"});",
							"",
							"pm.test(\"Verify username\", function () {",
							"    var username = pm.environment.get(\"username\");",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eql(username);",
							"});",
							"",
							"",
							"// Save JSON Web Token to environment",
							"let jwt = pm.response.json().token;",
							"pm.environment.set(\"jwt\", jwt);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/signup/",
					"host": [
						"{{server}}"
					],
					"path": [
						"signup",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is 'OK'\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Response includes 'user'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"username\");",
							"});",
							"",
							"pm.test(\"Response includes 'token'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"token\");",
							"});",
							"",
							"pm.test(\"Verify username\", function () {",
							"    var username = pm.environment.get(\"username\");",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eql(username);",
							"});",
							"",
							"",
							"// Save JSON Web Token to environment",
							"let jwt = pm.response.json().token;",
							"pm.environment.set(\"jwt\", jwt);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/login/",
					"host": [
						"{{server}}"
					],
					"path": [
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Login (FAIL)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Status code name is 'Bad Request'\", function () {",
							"    pm.response.to.have.status(\"Bad Request\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "",
							"type": "text"
						},
						{
							"key": "password",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/login/",
					"host": [
						"{{server}}"
					],
					"path": [
						"login",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Current User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is 'OK'\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Response includes 'include'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"id\");",
							"});",
							"",
							"pm.test(\"Response includes 'first_name'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"first_name\");",
							"});",
							"",
							"pm.test(\"Response includes 'last_name'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"last_name\");",
							"});",
							"",
							"pm.test(\"Response includes 'username'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"username\");",
							"});",
							"",
							"pm.test(\"Response includes 'email'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"email\");",
							"});",
							"",
							"pm.test(\"Verify username\", function () {",
							"    var username = pm.environment.get(\"username\");",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eql(username);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server}}/current_user/",
					"host": [
						"{{server}}"
					],
					"path": [
						"current_user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Current User (FAIL)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Status code name is 'Unauthorized'\", function () {",
							"    pm.response.to.have.status(\"Unauthorized\");",
							"});",
							"",
							"pm.test(\"Response includes 'detail'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"detail\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server}}/current_user/",
					"host": [
						"{{server}}"
					],
					"path": [
						"current_user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "User List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is 'OK'\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"",
							"// Visualizer",
							"let template = `",
							"    <h1>Users</h1>",
							"    <table>",
							"        {{# each response}}",
							"            <tr>",
							"                <td>{{id}}</td>",
							"                <td>{{username}}</td>",
							"                <td>{{first_name}}</td>",
							"                <td>{{last_name}}</td>",
							"                <td>{{email}}</td>",
							"            </tr>",
							"        {{/each}}",
							"    </table>",
							"`;",
							"pm.visualizer.set(template, {response: pm.response.json()});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server}}/users/",
					"host": [
						"{{server}}"
					],
					"path": [
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "User Detail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is 'OK'\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Response includes 'id'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"id\");",
							"});",
							"",
							"pm.test(\"Response includes 'username'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"username\");",
							"});",
							"",
							"pm.test(\"Response includes 'first_name'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"first_name\");",
							"});",
							"",
							"pm.test(\"Response includes 'last_name'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"last_name\");",
							"});",
							"",
							"pm.test(\"Response includes 'email'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"email\");",
							"});",
							"",
							"pm.test(\"Verify username\", function () {",
							"    var username = pm.environment.get(\"username\");",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.username).to.eql(username);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{server}}/users/{{username}}/",
					"host": [
						"{{server}}"
					],
					"path": [
						"users",
						"{{username}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Location List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"Status code name is 'Created'\", function () {",
							"    pm.response.to.have.status(\"Created\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "test_location",
							"type": "text"
						},
						{
							"key": "geom",
							"value": "{\"type\": \"Point\", \"coordinates\": [42.0, 50.0]}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/locations/",
					"host": [
						"{{server}}"
					],
					"path": [
						"locations",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Location List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is 'OK'\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"console.log(pm.response.json().features[0].geometry.coordinates[0]);",
							"",
							"// Visualizer",
							"let template = `",
							"    <h1>Locations</h1>",
							"    <table>",
							"        {{# each response.features}}",
							"            <tr>",
							"                <td>{{id}}</td>",
							"                <td>{{properties.name}}</td>",
							"                <td>{{geometry.type}}</td>",
							"                <td>{{geometry.coordinates}}</td>",
							"            </tr>",
							"        {{/each}}",
							"    </table>",
							"`;",
							"pm.visualizer.set(template, {response: pm.response.json()});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{server}}/locations/",
					"host": [
						"{{server}}"
					],
					"path": [
						"locations",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Location Detail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is 'OK'\", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Response includes 'id'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"id\");",
							"});",
							"",
							"pm.test(\"Response includes 'geometry'\", function () {",
							"    pm.expect(pm.response.json()).to.include.keys(\"geometry\");",
							"});",
							"",
							"pm.test(\"Verify locationname\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.properties.name).to.eql(\"test_location\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{server}}/locations/test_location/",
					"host": [
						"{{server}}"
					],
					"path": [
						"locations",
						"test_location",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Location Detail Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tests",
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Status code name is 'No Content'\", function () {",
							"    pm.response.to.have.status(\"No Content\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{server}}/locations/test_location/",
					"host": [
						"{{server}}"
					],
					"path": [
						"locations",
						"test_location",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "User Detail (LOGOUT)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							"pm.test(\"Status code name is 'No Content'\", function () {",
							"    pm.response.to.have.status(\"No Content\");",
							"});",
							"",
							"// Delete JSON Web Token",
							"pm.environment.unset(\"jwt\");",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{server}}/users/{{username}}/",
					"host": [
						"{{server}}"
					],
					"path": [
						"users",
						"{{username}}",
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "JWT {{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}